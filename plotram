#!/bin/bash

# Check if at least one argument (PID) is provided
if [ $# -lt 1 ]; then
    echo "Usage: $0 <PID>"
    exit 1
fi

# Assign the first argument as the PID to monitor
MONITOR_PID=$1

# Check if the provided PID exists
if ! ps -p "$MONITOR_PID" > /dev/null 2>&1; then
    echo "Error: No process found with PID $MONITOR_PID."
    exit 1
fi

# Check if gnuplot is installed
if ! command -v gnuplot &> /dev/null; then
    echo "Error: gnuplot is not installed. Please install it and try again."
    exit 1
fi

# Check if nvidia-smi is available for GPU monitoring
GPU_MONITOR=false
if command -v nvidia-smi &> /dev/null; then
    GPU_MONITOR=true
else
    echo "Warning: nvidia-smi not found. GPU memory tracking will be disabled."
fi

# Temporary files for data and plot
DATA_FILE=$(mktemp /tmp/mem_usage.XXXXXX)
PLOT_FILE="memory_usage.png"

# Function to clean up temporary files on exit
cleanup() {
    rm -f "$DATA_FILE"
}
trap cleanup EXIT

# Function to recursively get all child PIDs of a given PID
get_all_pids() {
    local parent=$1
    echo "$parent"
    local children
    children=$(pgrep -P "$parent")
    for child in $children; do
        get_all_pids "$child"
    done
}

# Initialize the data file with headers
if [ "$GPU_MONITOR" = true ]; then
    echo "# Time(s) Memory(MB) VRAM(MB)" > "$DATA_FILE"
else
    echo "# Time(s) Memory(MB)" > "$DATA_FILE"
fi

# Record the start time
START_TIME=$(date +%s)

# Function to generate the plot using gnuplot
generate_plot() {
    echo -e "\nGenerating memory usage plot..."

    # Create a temporary gnuplot script
    GNUPLOT_SCRIPT=$(mktemp /tmp/plot_script.XXXXXX)
    if [ "$GPU_MONITOR" = true ]; then
        cat << EOF > "$GNUPLOT_SCRIPT"
set terminal png size 800,600
set output '$PLOT_FILE'
set title "Memory Usage Over Time"
set xlabel "Time (s)"
set ylabel "Memory Usage (MB)"
set grid
set key outside
plot '$DATA_FILE' using 1:2 with lines linewidth 2 title "RAM (MB)", \
     '' using 1:3 with lines linewidth 2 title "VRAM (MB)"
EOF
    else
        cat << EOF > "$GNUPLOT_SCRIPT"
set terminal png size 800,600
set output '$PLOT_FILE'
set title "Memory Usage Over Time"
set xlabel "Time (s)"
set ylabel "Memory Usage (MB)"
set grid
set key outside
plot '$DATA_FILE' using 1:2 with lines linewidth 2 title "RAM (MB)"
EOF
    fi

    # Execute the gnuplot script
    gnuplot "$GNUPLOT_SCRIPT"

    # Remove the temporary gnuplot script
    rm -f "$GNUPLOT_SCRIPT"

    echo "Memory usage plot saved as $PLOT_FILE"
}

# Function to handle script interruption (e.g., CTRL+C)
handle_interrupt() {
    echo -e "\nInterrupt received. Generating plot with collected data..."
    generate_plot
    exit 0
}
trap 'handle_interrupt' SIGINT

# Function to monitor memory usage
monitor_memory() {
    while ps -p "$MONITOR_PID" > /dev/null 2>&1; do
        CURRENT_TIME=$(date +%s)
        ELAPSED_TIME=$((CURRENT_TIME - START_TIME))

        # Get all relevant PIDs (parent and children)
        PIDS=$(get_all_pids "$MONITOR_PID")

        # Sum RAM usage of all PIDs (in KB)
        MEMORY_KB=0
        for pid in $PIDS; do
            if [ -d "/proc/$pid" ]; then
                # VmRSS is the resident set size in KB
                RSS=$(grep VmRSS /proc/"$pid"/status 2>/dev/null | awk '{print $2}')
                if [ -n "$RSS" ]; then
                    MEMORY_KB=$((MEMORY_KB + RSS))
                fi
            fi
        done
        # Convert RAM from KB to MB with two decimal precision
        MEMORY_MB=$(echo "scale=2; $MEMORY_KB/1024" | bc)

        if [ "$GPU_MONITOR" = true ]; then
            # Sum GPU memory usage for all tracked PIDs
            VRAM=0
            # Get GPU memory usage using nvidia-smi
            NVIDIA_OUTPUT=$(nvidia-smi --query-compute-apps=pid,used_memory --format=csv,noheader,nounits 2>/dev/null)
            while IFS=, read -r pid gpu_mem; do
                # Trim whitespace
                pid=$(echo "$pid" | xargs)
                gpu_mem=$(echo "$gpu_mem" | xargs)
                if [[ " $PIDS " == *" $pid "* ]]; then
                    VRAM=$((VRAM + gpu_mem))
                fi
            done <<< "$NVIDIA_OUTPUT"
            # Ensure VRAM is an integer (MB)
            VRAM=${VRAM:-0}
            echo "$ELAPSED_TIME $MEMORY_MB $VRAM" >> "$DATA_FILE"
            # Print RAM and VRAM usage on the same line
            echo -ne "Time: ${ELAPSED_TIME}s | RAM: ${MEMORY_MB}MB | VRAM: ${VRAM}MB\r"
        else
            echo "$ELAPSED_TIME $MEMORY_MB" >> "$DATA_FILE"
            # Print RAM usage on the same line
            echo -ne "Time: ${ELAPSED_TIME}s | RAM: ${MEMORY_MB}MB\r"
        fi

        # Sleep for 1 second before the next measurement
        sleep 1
    done
}

# Start monitoring in the background
monitor_memory &

MONITOR_PID_BG=$!

# Wait for the monitored process to finish
wait $MONITOR_PID_BG

# After the process ends, generate the plot
generate_plot

